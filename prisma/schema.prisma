// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  email                String?   @unique
  emailVerified        DateTime?
  name                 String?
  publicId             String?   @unique
  primaryWalletAddress String?
  publicKey            String?
  depositAddress       String? 
  tipLink              String? 
  createdAt            DateTime  @default(now())
  stories              Story[]
  transactions         Transaction[]
  storyAccesses StoryAccess[]
  images       Image[]
}

model Story {
  id                            String   @id @default(cuid())
  userId                        String
  projectTitle                  String?
  projectDescription            String?
  title                         String?
  slug                          String?

  imageUrl                      String?
  type                          String?
  overview                      String?
  
  writingStep                   Int? @default(1)
  duration                      String?

  currentPlotStep               Int? @default(1)
  introductionStep              Int? @default(1)
  confrontationStep              Int? @default(0)
  resolutionStep              Int? @default(0)

  status                        String? // published, completed or draft
  currentStep                   Int?
  currentStepUrl                String?
  
  thematicElements              Json?
  thematicOptions               Json?
  suspenseTechnique             Json?
  suspenseTechniqueDescription  String?
  setting                       String?


  // INTRODUCTION 
  introductionLocked            Boolean? @default(false)
  genre                         String?
  genres                        Json?
  introductionTone              Json?
  introductionSetting           Json?
  protagonistSuggestions        Json?
  suggestedCharacters           Json?
    introductionImage              String?


  // INCITING INCIDENT
  incitingIncidentLocked        Boolean? @default(false)
  typeOfEvent String?                
  causeOfTheEvent String?
  stakesAndConsequences String?
  incitingIncidentTone  Json?
  incitingIncidentSetting Json?
  incitingIncidentExtraDetails String?
  incitingIncidentImage              String?

  // FIRST PLOT POINT
  firstPlotPointLocked  Boolean? @default(false) 
  protagonistGoal String?                
  protagonistTriggerToAction String?                
  obstaclesProtagonistWillFace String?                
  firstPlotPointCharacters  Json?
  firstPlotPointSetting  Json?
  firstPlotPointTone  Json?
  firstPlotPointImage String?

  // RISING ACTION & MIDPOINT
  challengesProtagonistFaces   String?                     
  protagonistPerspectiveChange   String?                     
  majorEventPropellingClimax   String?                     
  risingActionAndMidpointCharacters  Json?                                                   
  risingActionAndMidpointSetting   Json?                    
  risingActionAndMidpointTone  Json?
  risingActionAndMidpointExtraDetails  String?
  risingActionAndMidpointLocked Boolean? @default(false)
  risingActionAndMidpointImage  String?


  // PINCH POINT & SECOND PLOT POINT
  newObstacles   String?                     
  discoveryChanges   String?                     
  howStakesEscalate   String?                     
  pinchPointsAndSecondPlotPointCharacters  Json?                                                   
  pinchPointsAndSecondPlotPointSetting   Json?                    
  pinchPointsAndSecondPlotPointTone  Json?
  pinchPointsAndSecondPlotPointExtraDetails  String?
  pinchPointsAndSecondPlotPointLocked Boolean? @default(false)
  pinchPointsAndSecondPlotPointImage  String?

  // CLIMAX AND FALLING ACTION
  finalChallenge  String?
  challengeOutcome String?
  storyResolution String?
  climaxAndFallingActionSetting  Json?
  climaxAndFallingActionTone Json?
  climaxAndFallingActionExtraDetails Json?
  climaxAndFallingActionLocked Boolean? @default(false)
  climaxAndFallingActionImage String?

  // RESOLUTION
  climaxConsequences String?
  howCharactersEvolve String?
  resolutionOfConflict  String?
  // // resolutionCharacters
  resolutionSetting  Json?
  resolutionTone Json?
  resolutionExtraDetails Json?
  resolutionLocked Boolean? @default(false)
  resolutionImage String?




  paidAt                        DateTime?
  isPaid                        Boolean? @default(false)

  publicId                      String?  @unique
  metaData                      Json?
  createdAt                     DateTime @default(now())
  publishedAt                   DateTime? 

  pages                 Page[]
  scenes                Scene[]
  characters            Character[]
  plotSuggestions       PlotSuggestion[]
  transactions       Transaction[]
  images       Image[]

  storyStructure StoryStructure?
  // storySetting   StorySetting?
  // image Image?
  storyAccesses StoryAccess[]
  // storyGenres    GenresOnStories[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model StorySetting {
//   id                            String  @id @default(cuid())
//   storyId                       String  @unique

//   // INCITING INCIDENT
//   typeOfEvent String?                
//   causeOfTheEvent String?
//   stakesAndConsequences String?
//   incitingIncidentTone  Json?
//   incitingIncidentSetting String?

//   story   Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

// }
model StoryStructure {
  id                            String  @id @default(cuid())
  storyId                       String  @unique
  
  protagonistGoal                 Json?
  protagonistGoalSuggestions      Json?

  whoDoesNotHaveProtagonistGoal             String?
  whoDoesNotHaveProtagonistGoalSuggestions  Json?
  
  protagonists                  Json?
  protagonistSuggestions        Json?

  protagonistGoalObstacle             Json?
  protagonistGoalObstacleSuggestions  Json?

  protagonistWeaknessStrengthSuggestions  Json?

  protagonistGoalMotivationSuggestions    Json?

  settingSuggestions              Json?
  introductionSetting            Json?

  introductionStakes            Json?
  introductionStakesSuggestions Json?


  // STORY GENERATION ELEMENTS START
  introduceProtagonistAndOrdinaryWorld String?
  incitingIncident            String?
  firstPlotPoint  String?
  risingActionAndMidpoint String?
  pinchPointsAndSecondPlotPoint String?
  climaxAndFallingAction  String?
  resolution  String?
  // STORY GENERATION ELEMENTS END


  antagonists                  Json?
  antagonistSuggestions        Json?

  antagonisticForce             Json?

  exposition                    Json?
  expositionSuggestions         Json?
  expositionCharacters          Json?
  expositionSummary             String?

  hook                          Json?
  hookSuggestions               Json?
  hookCharacters                Json?
  hookSummary                   String?

  incitingEvent                 Json?
  incitingEventSuggestions      Json?
  incitingEventCharacters       Json?
  incitingEventSummary          String?

  protagonistOrdinaryWorld      Json?
  protagonistOrdinaryWorldSuggestions Json?
  protagonistOrdinaryWorldSummary Json?

  story   Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model PlotSuggestion {
  id          String   @id @default(cuid())
  storyId     String
  title       String?
  slug        String?
  plot        String?
  story       Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}


model Page {
  id            String   @id @default(cuid())
  storyId       String
  imageUrl      String?
  content       String
  number        Int
  createdAt     DateTime @default(now())

  // image Image?

  story         Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Image {
  id        String   @id @default(cuid())
  // url       String?
  image       String?
  userId       String?
  storyId       String?
  source       String? // generated or uploaded
  paidAt       String?
  createdAt DateTime @default(now())
  user   User?  @relation(fields: [userId], references: [id])
  story   Story?  @relation(fields: [storyId], references: [id])

  // storyId String? @unique
  // story   Story?  @relation(fields: [storyId], references: [id])

  // pageId String? @unique
  // page   Page?   @relation(fields: [pageId], references: [id])

  // characterId String?    @unique
  // character   Character? @relation(fields: [characterId], references: [id])

  // sceneId String? @unique
  // scene   Scene?  @relation(fields: [sceneId], references: [id])
}

model Scene {
  id            String   @id @default(cuid())
  storyId       String
  imageUrl      String?
  content       String
  order         Int
  createdAt     DateTime @default(now())

  // image Image?
  story Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Character {
  id                                String   @id @default(cuid())
  storyId                           String
  name                              String

  whatTheyWant                      Json?
  whoHasIt                          Json?
  protagonistGoalSuggestions        Json?

  whoDoesNotHaveProtagonistGoalSuggestions Json?
  whoDoesNotHaveProtagonistGoal             Json?
  protagonistGoalObstacleSuggestions        Json?
  protagonistGoalObstacle        Json?

  motivationSuggestions             Json?
  isProtagonist                     Boolean? @default(true)
  relationshipToProtagonist         String?
  emotionTriggerEvent               Json?
  emotionTriggerEventsSuggestions   Json?

  howCharacterOvercomeObstacleSuggestions   Json?
  howCharacterOvercomeObstacles             Json?

  howCharacterGoalChangeRelationshipSuggestions   Json?
  howCharacterGoalChangeRelationship   Json?

  howCharacterHasGrownSuggestions       Json?
  howCharacterHasGrown                  Json?

  howCharactersGoalsAndPrioritiesChangedSuggestions   Json?
  howCharactersGoalsAndPrioritiesChanged    Json?

  unresolvedIssuesFromDepartureSuggestions  Json?
  unresolvedIssuesFromDeparture   Json?

  // SUGGESTIONS
  motivationsSuggestions            Json?
  personalityTraitsSuggestions      Json?
  skillsSuggestions                 Json?
  strengthsSuggestions              Json?
  weaknessesSuggestions             Json?
  coreValueSuggestions              Json?
  conflictAndAngstSuggestions       Json?

  height                            String?
  weight                            String?

  hairTexture                      String?
  hairLength                       String?
  hairQuirk                        String?
  facialHair                       String?
  extraDescription                 String?  

  age                                       String?
  skinTone                                  String?
  hair                                      String?
  facialFeatures                            String?
  gender                                    String?
  role                                      String?
  personalityTraits                 Json?
  motivations                       Json?
  backstory                         String?
  angst                             String?
  relationships                     Json?
  relationshipsWithOtherCharacters  Json?
  skills                            Json?
  weaknesses                        Json?
  strengths                         Json?
  coreValues                        Json?
  speechPattern                     Json?
  imageUrl                          String?
  description                       String?
  summary                           String?
  intelligence                      String?
  createdAt                         DateTime @default(now())

  // image Image?

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                String   @id @default(cuid())
  storyId           String
  userId            String
  reference         String  @unique
  key               String  @unique // intentId or clientSecret
  unique_id         String  @unique
  deposit_address   String

  locale            String?
  mode              String?
  narration         String?
  confirmedAt       DateTime? 
  usedAt            DateTime? 

  type              String // create-story, read-story
  status            String //initiated, pending, completed, failed, abandoned
  amount            String
  formatAmount            Decimal?
  currency          String
  createdAt         DateTime @default(now())

  // image Image?
  story Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StoryAccess {
  id        String   @id @default(cuid())
  userId    String
  storyId   String
  currentChapter  String  
  hasAccess Boolean  @default(false)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  story     Story    @relation(fields: [storyId], references: [id])

  @@unique([userId, storyId]) // Ensure a user can't have duplicate records for the same story
}



// model StoryGenre {
//   id     String      @id @default(cuid())
//   name   String   @unique
//   stories GenresOnStories[]
// }

// model GenresOnStories {
//   storyId   String
//   storyGenreId   String
//   story     Story    @relation(fields: [storyId], references: [id])
//   storyGenre     StoryGenre    @relation(fields: [storyGenreId], references: [id])
//   createdAt DateTime @default(now())

//   @@id([storyId, storyGenreId])
// }