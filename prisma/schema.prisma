// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum GenerationType {
  IMAGE
  VIDEO
  MODEL
  AUDIO
  OTHER
}


enum ReactionType {
  LIKE
  DISLIKE
}




model User {
  id                   String    @id @default(cuid())
  email                String?   @unique
  emailVerified        DateTime?
  name                 String?
  gender               String?
  firstName            String?
  lastName             String?
  bio                  String?
  publicId             String?   @unique
  primaryWalletAddress String?
  publicKey            String?
  depositAddress       String? 
  tipLink              String? 
  imageUrl             String?
  backgroundImage      String?
  dateOfBirth          String?

  averageRating   Float?    
  totalRatings    Int       @default(0)
  credits              Float       @default(0.0)
  firstTimeLogin       Boolean?    @default(true)
  lastLogin            DateTime?
  password             String?
  userType             String?


  updatedAt             DateTime @updatedAt
  createdAt             DateTime  @default(now())

  articles                Article[]
  articleLikes            ArticleLike[]
  articleComments         ArticleComment[]      
  storyComments           StoryComment[]      

  stories                 Story[]
  transactions            Transaction[]
  articleTransactions     ArticleTransaction[]
  storyAccesses           StoryAccess[]
  articleAccesses         ArticleAccess[]
  images                  Image[]
  payments                Payment[]
  articleRatings          ArticleRating[]
  storyRatings            StoryRating[]
  socialMedia             SocialMedia?   // One-to-one relation
  info                    UserInformation?
  commentReactions               CommentReaction[]
  notifications  Notification[]
  bookmarks  Bookmark[]  // Add this line
  creditTransactions CreditTransaction[]
  sceneAssets SceneAsset[]
  characterAssets CharacterAsset[]
  chapterAssets  ChapterAsset[]
  authTokens AuthToken[]
  subscriptions  Subscription[] @relation("UserSubscriptions")
  subscribers    Subscription[] @relation("WriterSubscribers")


  @@index([name])
  @@index([totalRatings])
  @@index([averageRating])
  @@index([gender])
  @@index([firstName, lastName])
  @@index([createdAt])
  @@index([primaryWalletAddress])
}

model SocialMedia {
  id               String    @id @default(cuid())
  userId           String    @unique    // Foreign key
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  x                String?
  instagram        String?
  discord          String?
  tiktok           String?
  facebook         String?
  youtube          String?   
  linkedin         String?
  github           String?
  website          String?

  updatedAt        DateTime  @updatedAt
  createdAt        DateTime  @default(now())

  @@index([instagram])
  @@index([x])
}

model UserInformation {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  favoriteGenre  Json?
  favoriteVibe   Json?
  typeOfCreator  Json?
  updatedAt DateTime @updatedAt
  createdAt      DateTime @default(now())
}

model AuthToken {
  id             String   @id @default(uuid())
  userId         String   
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token         String   @unique
  isUsed     Boolean   @default(false) 

  updatedAt DateTime @updatedAt
  createdAt      DateTime @default(now())
}

model Story {
  id                            String   @id @default(cuid())
  userId                        String
  projectTitle                  String?
  projectDescription            String? @db.Text
  title                         String?
  slug                          String? @unique

  coverImageUrl                 String?
  bannerImageUrl                 String?

  imageUrl                      String?
  imageStatus                   String?
  imageId                       String?

  type                          String?  // ai or original
  storyType                     String?  // novel or short-story
  overview                      String? @db.Text
  autoDetectStructure           Boolean?

  writingStep                   Int? @default(1)
  duration                      String?
  averageRating   Float?    
  totalRatings    Int       @default(0)
  generalChapterFee         Decimal?  
  applyFeeToAllChapters     Boolean? @default(false)


  currentPlotStep               Int? @default(1)
  introductionStep              Int? @default(1)
  confrontationStep              Int? @default(0)
  resolutionStep              Int? @default(0)

  status                        String? // published, completed or draft
  currentChapterId              String?
  currentStep                   Int?
  currentStepUrl                String?
  structure                     String?

  targetAudience             Json?

  
  thematicElements              Json?
  thematicOptions               Json?
  suspenseTechnique             Json?
  suspenseTechniqueDescription  String?
  setting                       String?

  // INTRODUCTION 
  introductionLocked            Boolean? @default(false)
  genre                         String?
  genres                        Json?
  introductionTone              Json?
  introductionSetting           Json?
  introductionCharacters        Json?
  protagonistSuggestions        Json?
  suggestedCharacters           Json?
  introductionImage             String?


  // INCITING INCIDENT
  incitingIncidentLocked        Boolean? @default(false)
  typeOfEvent String?                
  causeOfTheEvent String?
  stakesAndConsequences String?
  incitingIncidentTone  Json?
  incitingIncidentCharacters  Json?
  incitingIncidentSetting Json?
  incitingIncidentExtraDetails String?
  incitingIncidentImage              String?

  // FIRST PLOT POINT
  firstPlotPointLocked  Boolean? @default(false) 
  protagonistGoal String?                
  protagonistTriggerToAction String?                
  obstaclesProtagonistWillFace String?                
  firstPlotPointCharacters  Json?
  firstPlotPointSetting  Json?
  firstPlotPointTone  Json?
  firstPlotPointImage String?

  // RISING ACTION & MIDPOINT
  challengesProtagonistFaces   String?                     
  protagonistPerspectiveChange   String?                     
  majorEventPropellingClimax   String?                     
  risingActionAndMidpointCharacters  Json?                                                   
  risingActionAndMidpointSetting   Json?                    
  risingActionAndMidpointTone  Json?
  risingActionAndMidpointExtraDetails  String?
  risingActionAndMidpointLocked Boolean? @default(false)
  risingActionAndMidpointImage  String?


  // PINCH POINT & SECOND PLOT POINT
  newObstacles   String?                     
  discoveryChanges   String?                     
  howStakesEscalate   String?                     
  pinchPointsAndSecondPlotPointCharacters  Json?                                                   
  pinchPointsAndSecondPlotPointSetting   Json?                    
  pinchPointsAndSecondPlotPointTone  Json?
  pinchPointsAndSecondPlotPointExtraDetails  String?
  pinchPointsAndSecondPlotPointLocked Boolean? @default(false)
  pinchPointsAndSecondPlotPointImage  String?

  // CLIMAX AND FALLING ACTION
  finalChallenge  String?
  challengeOutcome String?
  storyResolution String?
  climaxAndFallingActionSetting  Json?
  climaxAndFallingActionTone Json?
  climaxAndFallingActionCharacters Json?
  climaxAndFallingActionExtraDetails Json?
  climaxAndFallingActionLocked Boolean? @default(false)
  climaxAndFallingActionImage String?

  // RESOLUTION
  climaxConsequences String?
  howCharactersEvolve String?
  resolutionOfConflict  String?
  resolutionCharacters Json?
  resolutionSetting  Json?
  resolutionTone Json?
  resolutionExtraDetails Json?
  resolutionLocked Boolean? @default(false)
  resolutionImage String?

  paidAt                        DateTime?
  isPaid                        Boolean? @default(false)
  isFree                        Boolean   @default(false) 
  price                         Float?
  freeUntil                     Int       @default(2)
  accessEnd                     Int       @default(7)

  publicId                      String?  @unique
  metaData                      Json?
  createdAt                     DateTime @default(now())
  publishedAt                   DateTime? 
  updatedAt DateTime @updatedAt

  pages                 Page[]
  scenes                Scene[]
  characters            Character[]
  plotSuggestions       PlotSuggestion[]
  transactions       Transaction[]

  storyStructure StoryStructure?
  // image Image?
  storyAccesses StoryAccess[]
  // storyAccesses StoryAccess[] @relation("StoryToAccess", onDelete: Cascade)

  storyGenres    GenresOnStories[]
  storyAudiences    AudienceOnStories[]
  chapters    Chapter[]
  assetTransactions AssetTransaction[]
  ratings     StoryRating[]
  comments        StoryComment[]
  bookmarks  Bookmark[]  // Add this line
  // characterChats    UserCharacterChat[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@unique([projectTitle, status, isFree])
  // Primary indices for common query patterns
  @@index([userId, publishedAt])              // User's stories timeline
  @@index([type, publishedAt])               // Type filtering with chronological order
  @@index([isPaid, isFree, publishedAt])     // Payment status filtering
  @@index([writingStep, updatedAt])          // Progress tracking
  
  // Search optimization indices
  @@index([projectTitle])                     // Project search
  @@index([title])                           // Title search
  @@index([isFree])                           // Title search

  @@index([storyType])
  
  
  // Composite indices for filtered searches
  @@index([type, status, publishedAt])       // Status-based filtering
  @@index([price, publishedAt])              // Price-based queries

  // // Unique constraint for business logic
  // @@unique([projectTitle, status, isFree], name: "unique_project_status")
}

model Chapter {
  id                            String  @id @default(cuid())
  storyId                       String
  index                         Int?  
  readersHasAccess              Boolean @default(false)  
  title                         String?  
  description                   String?  
  duration                      String?  
  characters                    Json?  
  isFree                        Boolean   @default(false) 
  content                       String?  
  image                         String?  
  price                         Decimal?  
  coverImage                    String?  
  videoUrl                      String?
  paywall                       Boolean  @default(false)
  status                        String?  
  publishedAt                   DateTime?  // Indicates if the chapter is published
  releaseDate                   DateTime?  // Optional field for scheduling future releases
  actPosition                   String?
  questions                     Json?
  summary                       String?

  // createdBy                  String
  // creator       User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  scenes                Scene[]
  chapterAssets  ChapterAsset[]

  story       Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
  createdAt     DateTime @default(now())

}
model StoryStructure {
  id                            String  @id @default(cuid())
  storyId                       String  @unique
  
  // protagonistGoal                 Json?
  // protagonistGoalSuggestions      Json?

  // whoDoesNotHaveProtagonistGoal             String?
  // whoDoesNotHaveProtagonistGoalSuggestions  Json?
  
  // protagonists                  Json?
  // protagonistSuggestions        Json?

  // protagonistGoalObstacle             Json?
  // protagonistGoalObstacleSuggestions  Json?

  // protagonistWeaknessStrengthSuggestions  Json?

  // protagonistGoalMotivationSuggestions    Json?

  // settingSuggestions              Json?
  // introductionSetting            Json?

  // introductionStakes            Json?
  // introductionStakesSuggestions Json?


  // STORY GENERATION ELEMENTS START
  introduceProtagonistAndOrdinaryWorld String?
  incitingIncident            String?
  firstPlotPoint  String?
  risingActionAndMidpoint String?
  pinchPointsAndSecondPlotPoint String?
  climaxAndFallingAction  String?
  resolution  String?
  // STORY GENERATION ELEMENTS END

  introductionSummary String?
  incitingIncidentSummary            String?
  firstPlotPointSummary  String?
  risingActionAndMidpointSummary String?
  pinchPointsAndSecondPlotPointSummary String?
  climaxAndFallingActionSummary  String?
  resolutionSummary  String?

  antagonists                  Json?
  antagonistSuggestions        Json?

  // antagonisticForce             Json?

  // exposition                    Json?
  // expositionSuggestions         Json?
  // expositionCharacters          Json?
  // expositionSummary             String?

  // hook                          Json?
  // hookSuggestions               Json?
  // hookCharacters                Json?
  // hookSummary                   String?

  // incitingEvent                 Json?
  // incitingEventSuggestions      Json?
  // incitingEventCharacters       Json?
  // incitingEventSummary          String?

  // protagonistOrdinaryWorld      Json?
  // protagonistOrdinaryWorldSuggestions Json?
  // protagonistOrdinaryWorldSummary Json?

  story   Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model PlotSuggestion {
  id          String   @id @default(cuid())
  storyId     String
  title       String?
  slug        String?
  plot        String?
  story       Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}


model Page {
  id            String   @id @default(cuid())
  storyId       String
  imageUrl      String?
  content       String
  number        Int
  createdAt     DateTime @default(now())

  // image Image?

  story         Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Image {
  id                String   @id @default(cuid())
  ownerId           String   // ID of the associated entity (Story or Article)
  ownerType         String   // Type of the associated entity ('Story', 'Article')
  userId            String?
  url               String?
  image             String?
  imageStatus       String?
  publicId          String?
  signature         String?
  description       String?
  meta              Json?

  source       String? // generated or uploaded
  origin       String? // cloudinary or aws
  createdAt DateTime @default(now())
  user   User?  @relation(fields: [userId], references: [id])

  @@index([ownerId, ownerType]) // Optimize lookups by entity
}

model Scene {
  id            String   @id @default(cuid())
  storyId       String
  chapterId     String
  // mediaUrl      String
  imageUrl      String?
  title         String?
  setting         String?
  externalVideoUrl         String?
  videoUrl         String?
  charactersInvolved Json?
  content       String // description
  order         Int

  imageId            String?
  imageStatus        String?
  meta               Json?
  mood               String?
  narrative_importance String?
  prompt             String?
  retries            Int?
  time_of_day        String?
  videoId            String?
  videoStatus        String?
  pendingVideoUrl         String?

  createdAt     DateTime @default(now())

  // image Image?
  story Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapter Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  sceneAssets SceneAsset[]
}

model Character {
  id                                String   @id @default(cuid())
  storyId                                 String
  name                                    String

  // Goal-related fields
  whatTheyWant                            Json?
  whoHasIt                                Json?
  protagonistGoalSuggestions              Json?
  whoDoesNotHaveProtagonistGoalSuggestions Json?
  whoDoesNotHaveProtagonistGoal           Json?
  protagonistGoalObstacleSuggestions      Json?
  protagonistGoalObstacle                 Json?

  // Motivation and emotions
  motivationSuggestions                   Json?
  isProtagonist                           Boolean? @default(true)
  relationshipToProtagonist               String?
  emotionTriggerEvent                     Json?
  emotionTriggerEventsSuggestions         Json?

  // Character development
  howCharacterOvercomeObstacleSuggestions Json?
  howCharacterOvercomeObstacles           Json?
  howCharacterGoalChangeRelationshipSuggestions Json?
  howCharacterGoalChangeRelationship      Json?
  howCharacterHasGrownSuggestions         Json?
  howCharacterHasGrown                    Json?
  howCharactersGoalsAndPrioritiesChangedSuggestions Json?
  howCharactersGoalsAndPrioritiesChanged  Json?
  unresolvedIssuesFromDepartureSuggestions Json?
  unresolvedIssuesFromDeparture           Json?

  // Suggestions
  motivationsSuggestions                  Json?
  personalityTraitsSuggestions            Json?
  skillsSuggestions                       Json?
  strengthsSuggestions                    Json?
  weaknessesSuggestions                   Json?
  coreValueSuggestions                    Json?
  conflictAndAngstSuggestions             Json?

  // Physical attributes
  height                                  String?
  weight                                  String?
  hairTexture                             String?
  hairLength                              String?
  hairQuirk                               String?
  facialHair                              String?
  extraDescription                        String?  
  age                                     String?
  skinTone                                String?
  hair                                    String?
  facialFeatures                          String?
  eye_color                               String?
  gender                                  String?
  clothing_style                          String?

  // Character traits
  role                                    String?
  personalityTraits                       Json?
  motivations                             Json?
  backstory                               String?
  angst                                   String?
  relationships                           Json?
  relationshipsWithOtherCharacters        Json?
  skills                                  Json?
  weaknesses                              Json?
  strengths                               Json?
  coreValues                              Json?
  speechPattern                           Json?
  intelligence                            String?
  evolution                               Json?

  // Media and metadata
  imageUrl                                String?
  public_id                               String?
  description                             String?
  summary                                 String?
  metaData                                Json?
  createdAt                         DateTime @default(now())
  updatedAt DateTime @updatedAt

  // image Image?
  // characterInstances     CharacterInstance[]
  // characterChats         UserCharacterChat[]
  // characterRelationships UserCharacterRelationship[]

  assets CharacterAsset[]

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                String   @id @default(cuid())
  storyId           String
  userId            String
  reference         String  @unique
  key               String  @unique // intentId or clientSecret
  unique_id         String  @unique
  deposit_address   String

  locale            String?
  mode              String?
  narration         String?
  confirmedAt       DateTime? 
  usedAt            DateTime? 

  type              String // create-story, read-story, generate-image, tip
  status            String //initiated, pending, completed, failed, abandoned
  amount            String
  formatAmount            Float?
  currency          String
  createdAt         DateTime @default(now())
  updatedAt DateTime @updatedAt

  // image Image?
  story Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([status])
  @@index([userId])
  @@index([storyId])
}

model StoryAccess {
  id        String   @id @default(cuid())
  userId    String
  storyId   String
  currentChapter  String  
  hasAccess Boolean  @default(false)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  story     Story    @relation(fields: [storyId], references: [id])

  @@unique([userId, storyId]) // Ensure a user can't have duplicate records for the same story
}

model StoryGenre {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  description String?
  stories GenresOnStories[]
}

model GenresOnStories {
  id     String      @id @default(cuid())
  storyId   String
  storyGenreId   Int
  story     Story    @relation(fields: [storyId], references: [id])
  storyGenre     StoryGenre    @relation(fields: [storyGenreId], references: [id])
  createdAt DateTime @default(now())

  @@unique([storyId, storyGenreId]) // Ensures a story cannot have the same genre more than once
}

model TargetAudience {
  id     String      @id @default(cuid())
  name   String   @unique
  description String?
  publicId             String?
  stories AudienceOnStories[]

  updatedAt DateTime @updatedAt
  createdAt     DateTime   @default(now())
}

model AudienceOnStories {
  id     String      @id @default(cuid())
  storyId   String
  targetAudienceId   String
  story     Story    @relation(fields: [storyId], references: [id])
  targetAudience     TargetAudience    @relation(fields: [targetAudienceId], references: [id])
  publicId             String?   @unique

  updatedAt DateTime @updatedAt
  createdAt     DateTime   @default(now())

  @@unique([storyId, targetAudienceId]) // Ensures a story cannot have the same genre more than once
}

model Asset {
  id     String      @id @default(cuid())
  name          String    @unique
  description   String?
  code          String?   @unique
  limit         Int       // e.g., free usage limit (e.g., 3 free image generations)
  price         Float     // price to pay after free usage is exhausted
  transactions  AssetTransaction[]  // Relations to track purchases
  updatedAt DateTime @updatedAt
  createdAt     DateTime   @default(now())
}

model AssetTransaction {
  id            String      @id @default(cuid())
  description   String?     
  reference     String?     
  userId        String     
  storyId       String?     
  assetId       String
  isFree        Boolean    @default(false)
  usageCount    Int        @default(0)  // Track how many times the asset has been used
  totalPaid     Float      @default(0)  // Track the total amount paid for this asset

  story         Story? @relation(fields: [storyId], references: [id], onDelete: Cascade)
  asset         Asset      @relation(fields: [assetId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([userId, assetId])  // Index for easy querying of usage per user per asset
}

model Article {
  id            String      @id @default(cuid())
  userId        String     
  title         String
  slug          String  @unique
  content       Json?
  excerpt       String?
  type       String? // tiptap, editorJs, novel
  coverImage       String?
  likeCount       Int?  @default(0)
  isPaid      Boolean        @default(false)
  paidAt                        DateTime?
  publishedAt                   DateTime? 
  isFree                        Boolean   @default(false) 
  price      Float?
  averageRating   Float?    
  totalRatings    Int       @default(0)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  likes           ArticleLike[]
  comments        ArticleComment[]
  articleTags      TagsOnArticle[]
  transactions    ArticleTransaction[]
  articleAccesses ArticleAccess[]
  ratings     ArticleRating[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Primary access pattern indices
  @@index([publishedAt(sort: Desc), isPaid, isFree])  // For listing articles with payment status
  @@index([userId, publishedAt(sort: Desc)])          // For user's articles timeline
  @@index([type, publishedAt(sort: Desc)])           // For filtering by type with timeline
  
  // Secondary access pattern indices
  @@index([price, publishedAt(sort: Desc)])          // For price-based filtering
  @@index([likeCount(sort: Desc), publishedAt])      // For popularity-based queries

  // Full-text search index (if using PostgreSQL)
  // @@fulltext([title, excerpt])  // Uncomment if using PostgreSQL 12+
}

model ArticleLike {
  id            String      @id @default(cuid())
  articleId String
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([articleId, userId]) // Ensures a user can only like an article once
  @@index([userId])
  @@index([articleId])
}

model ArticleAccess {
  id        String   @id @default(cuid())
  userId    String
  articleId   String
  hasAccess Boolean  @default(false)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  article     Article    @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId]) // Ensure a user can't have duplicate records for the same story
}

model Tag {
  id        String    @id @default(cuid())
  title   String @unique
  description   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  article TagsOnArticle[]
}

model TagsOnArticle {
  id              String      @id @default(cuid())
  articleId       String
  tagId           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime  @updatedAt

  article         Article    @relation(fields: [articleId], references: [id])
  articleTag      Tag    @relation(fields: [tagId], references: [id])

  @@unique([articleId, tagId]) // Ensures a story cannot have the same genre more than once
}


model ArticleComment {
  id          String    @id @default(cuid())
  content     String
  articleId   String
  userId      String
  parentId    String?   

  article     Article   @relation(fields: [articleId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  
  parent      ArticleComment?  @relation(name: "ArticleCommentReplies", fields: [parentId], references: [id], onDelete: Cascade) 
  replies     ArticleComment[] @relation(name: "ArticleCommentReplies") // Self-referencing relationship for replies
  
  // Additional fields that might be useful
  isEdited  Boolean   @default(false)
  replyCount Int      @default(0)     // Cache the number of replies

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([articleId])
  @@index([userId])
  @@index([parentId]) // Needed for efficient reply lookups
}

model StoryComment {
  id          String    @id @default(cuid())
  content     String
  storyId     String
  story       Story   @relation(fields: [storyId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  parentId    String?   
  parent      StoryComment?  @relation(name: "StoryCommentReplies", fields: [parentId], references: [id], onDelete: Cascade) 
  replies     StoryComment[] @relation(name: "StoryCommentReplies") // Self-referencing relationship for replies
  
  reactions   CommentReaction[]
  likeCount   Int         @default(0)
  dislikeCount Int        @default(0)

  // Additional fields that might be useful
  isEdited  Boolean   @default(false)
  replyCount Int      @default(0)     // Cache the number of replies

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storyId])
  @@index([userId])
  @@index([parentId]) // Needed for efficient reply lookups
}


model CommentReaction {
  id         String         @id @default(cuid())
  userId     String
  commentId  String
  type       ReactionType
  createdAt  DateTime       @default(now())

  user       User           @relation(fields: [userId], references: [id])
  comment    StoryComment   @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId]) // Only one reaction per user per comment
}

model ArticleTransaction {
  id                String   @id @default(cuid())
  articleId         String
  userId            String
  reference         String  @unique
  key               String  @unique // intentId or clientSecret
  unique_id         String  @unique
  deposit_address   String

  locale            String?
  mode              String?
  narration         String?
  confirmedAt       DateTime? 

  type              String // create-article, read-article, generate-image, 
  status            String //initiated, pending, completed, failed, abandoned
  amount            String
  formatAmount      Float?
  currency          String
  createdAt         DateTime @default(now())
  updatedAt DateTime @updatedAt

  // image Image?
  article Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([status])
  @@index([userId])
  @@index([articleId])
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  reference         String  @unique
  key               String?  @unique // intentId or clientSecret
  unique_id         String?  @unique
  deposit_address   String?

  locale            String?
  mode              String?
  narration         String?
  confirmedAt       DateTime? 

  type              String? // create-story, read-story, generate-image, tip
  status            String? //initiated, pending, completed, failed, abandoned
  amount            String
  formatAmount      Float?
  currency          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // image Image?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([status])
  @@index([userId])
}

model ArticleRating {
  id                String   @id @default(cuid())
  articleId String
  userId    String
  rating    Int      @db.SmallInt
  review    String?  // Optional text review

  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, articleId]) // Ensures one rating per user per article
  @@index([articleId])
  @@index([rating]) // Useful for querying articles by rating
}

model StoryRating {
  id                String   @id @default(cuid())
  rating    Int      @db.SmallInt
  review    String?  // Optional text review
  userId    String
  storyId   String
  
  user      User     @relation(fields: [userId], references: [id])
  story     Story    @relation(fields: [storyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, storyId]) // Ensures one rating per user per story
  @@index([storyId])
  @@index([rating]) // Useful for querying articles by rating
}

model CreditTransaction {
  id          String   @id @default(uuid())
  userId      String
  type        String
  amount      Decimal  
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([userId, type])
}


model Subscription {
  id                String   @id @default(cuid())
  userId     String   // The reader subscribing
  writerId   String   // The writer being subscribed to
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation("UserSubscriptions", fields: [userId], references: [id])
  writer     User     @relation("WriterSubscribers", fields: [writerId], references: [id])

  @@unique([userId, writerId])
}



model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  storyId   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  story     Story    @relation(fields: [storyId], references: [id])

  @@unique([userId, storyId]) // Prevent duplicate bookmarks
}



model Notification {
  id                String   @id @default(cuid())
  userId     String   // Recipient
  type       String   // e.g. "NEW_STORY"
  title    String?
  message    String
  data       Json?    // e.g. { storyId: "abc123" }
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt   DateTime  @updatedAt

  user       User     @relation(fields: [userId], references: [id])
}



model SceneAsset {
  id                String         @id @default(uuid())
  userId            String
  sceneId           String
  type              GenerationType
  cost              Float          @default(0)
  url               String?
  imageUrl          String?
  externalImageUrl  String?
  videoUrl          String?
  externalVideoUrl  String?
  videoId           String?
  imageId           String?
  imageStatus       String?
  videoStatus       String?
  videoDuration     String?
  retries           Int?
  meta              Json?
  modificationOfId  String?
  createdAt         DateTime       @default(now())
  updatedAt   DateTime  @updatedAt

  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scene             Scene          @relation(fields: [sceneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modifiedVersion   SceneAsset?    @relation("ModifiedVersions", fields: [modificationOfId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  modifiedVersions  SceneAsset[]   @relation("ModifiedVersions")

  @@index([createdAt])
  @@index([modificationOfId])
  @@index([sceneId])
  @@index([type])
  @@index([userId])
}

model CharacterAsset {
  id                 String         @id @default(uuid())
  userId             String
  characterId        String
  type               GenerationType
  cost               Float
  url                String?
  imageUrl           String?
  externalImageUrl   String?
  videoUrl           String?
  externalVideoUrl   String?
  videoId            String?
  imageId            String?
  imageStatus        String?
  videoStatus        String?
  videoDuration      String?
  retries            Int?
  meta               Json?
  modificationOfId   String?
  createdAt          DateTime       @default(now())
  updatedAt     DateTime @updatedAt

  character          Character      @relation(fields: [characterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modificationOf     CharacterAsset? @relation("AssetModifications", fields: [modificationOfId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  modifications      CharacterAsset[] @relation("AssetModifications")
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([characterId])
  @@index([createdAt])
  @@index([modificationOfId])
  @@index([type])
  @@index([userId])
}

model ChapterAsset {
  id                String         @id @default(uuid())
  userId            String
  chapterId         String
  type              GenerationType
  cost              Decimal

  coverImageUrl          String?
  externalCoverImageUrl  String?

  imageUrl          String?
  externalImageUrl  String?
  videoUrl          String?
  externalVideoUrl  String?
  videoId           String?
  imageId           String?
  imageStatus       String?
  videoStatus       String?
  videoDuration     String?
  retries           Int?
  meta              Json?
  modificationOfId  String?
  createdAt         DateTime       @default(now())
  updatedAt     DateTime @updatedAt
  
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapter           Chapter        @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modifiedVersion   ChapterAsset?  @relation("AssetModifications", fields: [modificationOfId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  modifications     ChapterAsset[] @relation("AssetModifications")

  @@index([chapterId])
  @@index([createdAt])
  @@index([modificationOfId])
  @@index([type])
  @@index([userId])
}







// model StoryCollaborator {
//   id                String   @id @default(cuid())
//   userId        String
//   storyId       String
//   role          String
//   joinedAt      DateTime


//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   // story         Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
// }

// model ChapterVersion {
//   id                String   @id @default(cuid())
//   // chapterId
//   // versionNumber: Incremental version number.
//   // content: The content of the chapter for this version.
//   // editedBy: User who made the changes.
//   // editedAt: Timestamp when this version was created.
//   // changeSummary (Optional): A short description or diff of what changed.
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
// }

// model CollaborationLog {
//   id                String   @id @default(cuid())
//   // id: Unique identifier.
//   // chapterId or storyId: Depending on whether changes are at the chapter or story level.
//   // userId: User who made the change.
//   // changeDetails: Details about the change (could be a diff or summary).
//   // timestamp: When the change was made.
// }

// model SuperAdmin {
//   id                String   @id @default(cuid())

//   // // Basic personal details
//   // firstName: string;
//   // lastName: string;
//   // email: string;
//   // phoneNumber?: string; // Optional, if needed

//   // // Security and authentication
//   // passwordHash: string; // Hashed password
//   // salt?: string; // Optional: salt used for hashing the password, if applicable
//   // twoFactorEnabled: boolean;
//   // twoFactorSecret?: string; // Optional: secret for 2FA if enabled

//   // // Role and permissions
//   // role: "superadmin"; // Static value or a field from an enum of roles
//   // permissions?: string[]; // Optional: a list of additional permissions, if necessary

//   // // Account status and metadata
//   // isActive: boolean; // Whether the account is active or disabled
//   // isVerified: boolean; // Whether the email/phone is verified
//   // lastLoginAt?: Date; // Timestamp of the last login
//   // failedLoginAttempts?: number; // Track number of failed logins
//   // lockoutUntil?: Date; // If the account is locked due to too many failed logins

//   // // Timestamps
//   // createdAt: Date; // When the account was created
//   // updatedAt: Date; // When the account was last updated

//   // // Additional fields (if needed)
//   // profilePictureUrl?: string; // URL to the admin's profile picture
//   // bio?: string; // A short biography or description of the admin
// }










// model ChatMessage {
//   id         String   @id @default(uuid())
//   chatId     String
//   senderType SenderType
//   content    String   @db.Text
//   createdAt  DateTime @default(now())
//   embedding  Float[]  @db.Vector(1536) // Stores OpenAI embeddings
//   chat       UserCharacterChat @relation(fields: [chatId], references: [id])
// }


// model CharacterMemory {
//   id             String                  @id @default(uuid())
//   relationshipId String
//   memoryType     String
//   content        String                  @db.Text
//   importance     Int                     @default(1)
//   createdAt      DateTime                @default(now())
//   relatedEntities Json?
//   isCoreMemory   Boolean                 @default(false)
//   embedding      Float[]                  @db.Vector(1536) 
//   relationship   UserCharacterRelationship @relation(fields: [relationshipId], references: [id])
// }


// model UserCharacterChat {
//   id                String              @id @default(uuid())
//   userId            String
//   characterId       String
//   storyId           String
//   createdAt         DateTime            @default(now())
//   updatedAt         DateTime            @updatedAt
//   lastMessageAt     DateTime?
//   lastMessageId     String?
//   user              User                @relation(fields: [userId], references: [id])
//   character         Character           @relation(fields: [characterId], references: [id])
//   story             Story               @relation(fields: [storyId], references: [id])
//   messages          ChatMessage[]
//   chatStatus        ChatStatus?
//   relationship      UserCharacterRelationship   @relation(fields: [userId, characterId], references: [userId, characterId])

//   @@unique([userId, characterId])
// }

// model ChatMessage {
//   id          String       @id @default(uuid())
//   chatId      String
//   senderType  SenderType
//   content     String       @db.Text
//   createdAt   DateTime     @default(now())
//   read        Boolean      @default(false)
//   metadata    Json?
//   chat        UserCharacterChat @relation(fields: [chatId], references: [id])
// }

// model UserCharacterRelationship {
//   id                String          @id @default(uuid())
//   userId            String
//   characterId       String
//   affinityScore     Float           @default(0)
//   relationshipStatus String?
//   interactionCount   Int            @default(0)
//   relationshipNotes  Json?
//   firstInteraction   DateTime       @default(now())
//   lastInteraction    DateTime       @default(now())
//   user               User           @relation(fields: [userId], references: [id])
//   character          Character      @relation(fields: [characterId], references: [id])
//   memories           CharacterMemory[]
//   chats              UserCharacterChat[]

//   @@unique([userId, characterId])
// }

// model CharacterMemory {
//   id             String                  @id @default(uuid())
//   relationshipId String
//   memoryType     String
//   content        String                  @db.Text
//   importance     Int                     @default(1)
//   createdAt      DateTime                @default(now())
//   relatedEntities Json?
//   isCoreMemory   Boolean                 @default(false)
//   relationship   UserCharacterRelationship @relation(fields: [relationshipId], references: [id])
// }

// model ChatStatus {
//   id               String            @id @default(uuid())
//   chatId           String            @unique
//   status           ChatStatusType    @default(ACTIVE)
//   currentContext   Json?
//   activeTopics     Json?
//   statusUpdatedAt  DateTime          @default(now())
//   chat             UserCharacterChat @relation(fields: [chatId], references: [id])
// }

// enum SenderType {
//   USER
//   CHARACTER
// }

// enum ChatStatusType {
//   ACTIVE
//   PAUSED
//   COMPLETED
// }